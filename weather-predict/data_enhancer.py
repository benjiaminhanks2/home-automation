import os
import argparse

import pandas
from sklearn.model_selection import train_test_split

from data_source.DatapointAugmenter import DatapointAugmenter
from data_source.home_automation.ModelCleanup import ModelCleanup
import config


argparse = argparse.ArgumentParser()
argparse.add_argument("-f", "--input-file", required=True, dest="input_file",
                      help="Input CSV file generated by data_extractor")
argparse.add_argument("-p", "--test-file-percent", required=True, dest="test_file_percent", type=int,
                      help="Percent of the date will be generated into a separate test file")
argparse.add_argument("-d", "--datapoints-behind", required=True, dest="datapoints_behind", type=int,
                      help="Datapoints behind to be added for the model on each line")
args = vars(argparse.parse_args())


model_preparator = DatapointAugmenter(config.exclude_fields_from_prediction)
model_cleanup = ModelCleanup(0.1, config.exclude_fields_from_prediction, 'rain_outside_mean')

dataframe = model_cleanup.get_cleanned(pandas.read_csv(args['input_file']))
dataframe = model_preparator.prepare(dataframe, args['datapoints_behind'], 'date')
main_data, test_data = train_test_split(dataframe, test_size=args['test_file_percent'] / 100)

file_components = os.path.splitext(args['input_file'])
main_data_file_name = '{0}_model{1}'.format(file_components[0], file_components[1])
main_data = main_data.sort_values(by=['date'])
main_data.sort_values(by=['date']).to_csv(main_data_file_name)

test_data_file_name = '{0}_model_test{1}'.format(file_components[0], file_components[1])
test_data.sort_values(by=['date']).to_csv(test_data_file_name)