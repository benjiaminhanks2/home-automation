import sys
import argparse

import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix


argparse = argparse.ArgumentParser()
argparse.add_argument("-i", "--input-file", required=True, dest="input_file",
                      help="Input CSV file generated by data_extractor")
args = vars(argparse.parse_args())


dataset = pd.read_csv(args['input_file']).dropna()
X = dataset.iloc[:, 3:].values
y = dataset.iloc[:, 2].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 0)
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


def get_classifier(input_dim: int):
    classifier = Sequential()
    inner_nodes = int(input_dim / 2)
    classifier.add(Dense(output_dim=inner_nodes, init='uniform', activation='relu', input_dim=input_dim))
    classifier.add(Dense(output_dim=inner_nodes, init='uniform', activation='relu'))
    classifier.add(Dense(output_dim=1, init='uniform', activation='sigmoid'))
    classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    return classifier

classifier = get_classifier(X.shape[1])
classifier.fit(X_train, y_train, batch_size=10, nb_epoch=50)

y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)
cm = confusion_matrix(y_test, y_pred)
print(cm)


test_dataset = pd.read_csv('/home/ionescu/projects/python/home-automation/weather-predict/weather_model_test.csv').dropna()
XX = test_dataset.iloc[:, 3:].values
yy = test_dataset.iloc[:, 2].values

i = 0
good = 0
for test_data in XX:
    y_pred = classifier.predict(sc.transform(np.array([test_data])))
    y_pred = (y_pred > 0.5)
    if (y_pred == True and  yy[i] == 1) or (y_pred == False and yy[i] == 0):
        good += 1
    print("Index: {0}, Actual: {1}, Predicted : {2}". format(i, yy[i], y_pred))
    i += 1

print ('Total: {0}, Good: {1}, Percent accuracy: {2} ', i, good, good * 100 / i)

