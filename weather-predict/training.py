import sys
import argparse

from sklearn.preprocessing import StandardScaler
from sklearn.externals import joblib

from machine_learning.ModelBuilder import ModelBuilder
from machine_learning.GridSearch import GridSearch
from data_source.FinalDataProvider import FinalDataProvider
import config


argparse = argparse.ArgumentParser()
argparse.add_argument("-f", "--input-file", required=True, dest="input_file",
                      help="Input CSV file generated by data_extractor")
argparse.add_argument("-md", "--mode", required=True, dest="mode", choices=['grid', 'train'],
                      help="Mode of operations: grid or train")
args = vars(argparse.parse_args())

model_builder = ModelBuilder()
grid_search = GridSearch(model_builder)
final_data_provider = FinalDataProvider()
scaler = StandardScaler()

X, y = final_data_provider.get(args['input_file'])
X = scaler.fit_transform(X)
joblib.dump(scaler, config.model['sklearn_scaler_file_name'])

if args['mode'] == 'grid':
    print(grid_search.search(X, y))
    sys.exit()

classifier = model_builder.build(X.shape[1], 'adam', 0.1)
classifier.fit(X, y, batch_size=1, nb_epoch=7)
classifier.save(config.model['keras_model_file_name'])
